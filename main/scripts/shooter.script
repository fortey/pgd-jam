go.property("crosshair", true)
go.property("spread_angle", 0.2)

local camera = require "orthographic.camera"
local CAMERA_ID = hash("/camera")
local weapons = require "main.scripts.weapons"
local CHANGE_WEAPON_ID = hash("change_weapon")

local function change_weapon(self, weapon)
	self.weapon = weapons[weapon]
	self.fire_anim = self.weapon.fire_anim
	self.attack_cooldown = self.weapon.time_between_atack
	self.reload_cooldown = 0
	msg.post("#sprite", "play_animation", {id = self.weapon.sprite})
end

local function update_weapon_info(weapon)
	msg.post("/gui#level", "update_ammo",
	{name = weapon.name, catridges = weapon.catridges, clip_capacity = weapon.clip_capacity, ammunition = weapon.ammunition})
end

function init(self)
	change_weapon(self, "gun")
	update_weapon_info(weapons["gun"])
	update_weapon_info(weapons["shotgun"])
end

local function shoot(self)
	self.weapon.shoot(self, go)
	msg.post("#sprite", "play_animation", {id = self.fire_anim})
	self.attack_cooldown = self.weapon.time_between_atack
	self.weapon.catridges = self.weapon.catridges - 1
	update_weapon_info(self.weapon)
end

local function start_reload(self)
	if self.weapon.ammunition >0 then
		self.reload_cooldown = self.weapon.reload_time
		msg.post("/gui#level", "show_reload")
	end
end

local function reload(self, weapon)
	local amount = math.min(weapon.clip_capacity - weapon.catridges, weapon.ammunition)
	weapon.catridges = weapon.catridges + amount
	weapon.ammunition = weapon.ammunition - amount
	msg.post("/gui#level", "hide_reload")
	self.attack_cooldown = 0
	update_weapon_info(self.weapon)
end

function on_input(self, action_id, action)
	if action_id then		
		-- shoot and apply recoil
		if self.crosshair and action_id == hash("touch") and action.released and self.attack_cooldown <= 0 then
			if self.weapon.catridges > 0 then
				shoot(self)
				if self.weapon.catridges > 0 then
					if self.weapon.show_reload_between_attack then
						msg.post("/gui#level", "show_reload")
					end
				else
					start_reload(self)
				end
			else
				--play sound
			end
		elseif action_id == hash("reload") and action.released  and self.reload_cooldown <= 0 then
			start_reload(self)
		end
	end
end

function update(self, dt)
	
	if self.crosshair then
		local crosshair_world = go.get_world_position("crosshair")
		local player_world = go.get_world_position()
		local angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y)
		local rotation = vmath.quat_rotation_z(angle)
		go.set_rotation(rotation)

		if self.reload_cooldown > 0 then
			self.reload_cooldown = self.reload_cooldown - dt
			if self.reload_cooldown > 0 then 
				msg.post("/gui#level", "update_reload", { position = crosshair_world, cooldown = self.reload_cooldown, all_time = self.weapon.reload_time})
			else
				reload(self, self.weapon)
			end
		elseif self.attack_cooldown > 0 then
			self.attack_cooldown = self.attack_cooldown - dt
			if self.attack_cooldown > 0 then 
				msg.post("/gui#level", "update_reload", { position = crosshair_world, cooldown = self.attack_cooldown, all_time = self.weapon.time_between_atack})
			else
				msg.post("/gui#level", "hide_reload")
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == CHANGE_WEAPON_ID then
		change_weapon(self, message.weapon)
	elseif message_id == hash("set_update_reload") then
		self.update_reload = message.callback
	end
end
