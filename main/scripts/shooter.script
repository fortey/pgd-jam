go.property("crosshair", true)
go.property("spread_angle", 0.2)

local camera = require "orthographic.camera"
local CAMERA_ID = hash("/camera")

function init(self)

	math.randomseed(os.time())

end

function shotgun_shoot(self)
	local crosshair_world = go.get_position("crosshair")
	local player_world = go.get_position()
	local offset = vmath.normalize(crosshair_world - player_world) * 5
	camera.recoil(CAMERA_ID, offset, 0.5)
	sound.play("#shoot")
	local rotation = go.get_rotation()
	local offset = vmath.rotate(rotation, vmath.vector3(2, 28, 0))

	local rotate_step = self.spread_angle/5
	for i = -5,5,1 do 
		factory.create("#shoot_factory", player_world + offset, rotation*vmath.quat_rotation_z(i*rotate_step), {speed = math.random(800, 1300), lifetime = 0.4})
	end
end

function shoot()
	local crosshair_world = go.get_position("crosshair")
	local player_world = go.get_position()
	local offset = vmath.normalize(crosshair_world - player_world) * 5
	camera.recoil(CAMERA_ID, offset, 0.5)
	sound.play("#shoot")
	local offset = vmath.rotate(go.get_rotation(), vmath.vector3(2, 28, 0))
	factory.create("#shoot_factory", go.get_position() + offset)
end

function on_input(self, action_id, action)
	if action_id then		
		-- shoot and apply recoil
		if self.crosshair and action_id == hash("touch") and action.released then
			shotgun_shoot(self)
		end
	end
end

function update(self, dt)

	if self.crosshair then
		local crosshair_world = go.get_world_position("crosshair")
		local player_world = go.get_world_position()
		local angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y)
		local rotation = vmath.quat_rotation_z(angle)
		go.set_rotation(rotation)
	end

end