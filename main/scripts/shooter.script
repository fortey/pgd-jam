go.property("crosshair", true)
go.property("spread_angle", 0.2)

local camera = require "orthographic.camera"
local CAMERA_ID = hash("/camera")
local weapons = require "main.scripts.weapons"
local CHANGE_WEAPON_ID = hash("change_weapon")
local TAKE_AMMO = hash("take_ammo")
local CHANGE_WEAPON_TIME = 0.6

local shotgun_sounds = {times = {start = 0.42, one = 0.415, _end = 0.57}, sounds = {start = "#shotgun_reload_start", one = "#shotgun_reload_one", _end = "#shotgun_reload_end"}}

local function stop_reload(self)
	self.reload_cooldown = 0
	msg.post("/gui#level", "hide_reload")
	sound.stop(self.weapon.reload_sound)
end

local function change_weapon(self, weapon)
	if self.weapon ~= weapons[weapon] then
		if self.weapon ~= nil then
			--stop_reload(self)
			sound.play("#change_weapon")
		end
		
		self.weapon = weapons[weapon]
		self.fire_anim = self.weapon.fire_anim
		self.attack_cooldown = CHANGE_WEAPON_TIME
		
		msg.post("#sprite", "play_animation", {id = self.weapon.sprite})
	end
end

local function update_weapon_info(weapon)
	msg.post("/gui#level", "update_ammo",
	{name = weapon.name, catridges = weapon.catridges, clip_capacity = weapon.clip_capacity, ammunition = weapon.ammunition})
end

function init(self)
	self.attack_cooldown = 0
	self.reload_cooldown = 0
	change_weapon(self, "gun")
	update_weapon_info(weapons["gun"])
	update_weapon_info(weapons["shotgun"])
end

local function shoot(self)
	self.weapon.shoot(self, go)
	msg.post("#sprite", "play_animation", {id = self.fire_anim})
	self.attack_cooldown = self.weapon.time_between_atack
	self.weapon.catridges = self.weapon.catridges - 1
	update_weapon_info(self.weapon)
end

local function play_reload_end(self, message_id, message, sender)
	msg.post("/gui#level", "hide_reload")
	self.attack_cooldown = 0
end

local function play_reload_one_end(self, message_id, message, sender)

	self.weapon.catridges = self.weapon.catridges + 1
	self.weapon.ammunition = self.weapon.ammunition - 1
	self.weapon.current_reload = self.weapon.current_reload + 1

	update_weapon_info(self.weapon)

	if self.weapon.current_reload < self.weapon.max_reload then
		sound.play(shotgun_sounds.sounds.one, nil, play_reload_one_end)
	else
		sound.play(shotgun_sounds.sounds._end, nil, play_reload_end)
	end
end

local function play_reload_start_end(self, message_id, message, sender)
	sound.play(shotgun_sounds.sounds.one, nil, play_reload_one_end)
end

local function start_reload_shotgun(self)
	local amount = math.min(self.weapon.clip_capacity - self.weapon.catridges, self.weapon.ammunition)
	self.reload_time = shotgun_sounds.times.start + shotgun_sounds.times._end + shotgun_sounds.times.one*amount
	self.reload_cooldown = self.reload_time
	
	self.weapon.current_reload = 0
	self.weapon.max_reload = amount
	sound.play(shotgun_sounds.sounds.start, nil, play_reload_start_end)
end

local function gun_reload_end(self, message_id, message, sender)
	local amount = math.min(self.weapon.clip_capacity - self.weapon.catridges, self.weapon.ammunition)
	self.weapon.catridges = self.weapon.catridges + amount
	self.weapon.ammunition = self.weapon.ammunition - amount
	msg.post("/gui#level", "hide_reload")
	self.attack_cooldown = 0
	update_weapon_info(self.weapon)
end

local function start_reload(self)
	if self.weapon.ammunition >0 then
		if self.weapon.name == "shotgun" then
			start_reload_shotgun(self)
		else
			self.reload_cooldown = self.weapon.reload_time
			self.reload_time = self.weapon.reload_time
			sound.play(self.weapon.reload_sound, nil, gun_reload_end)
		end
		msg.post("/gui#level", "show_reload")
	end
end

function on_input(self, action_id, action)
	if action_id then		
		-- shoot and apply recoil
		if self.crosshair and action_id == hash("touch") and action.released and self.attack_cooldown <= 0 and self.reload_cooldown <= 0 then
			if self.weapon.catridges > 0 then
				shoot(self)
				if self.weapon.catridges > 0 then
					if self.weapon.show_reload_between_attack then
						msg.post("/gui#level", "show_reload")
					end
				else
					start_reload(self)
				end
			else
				if self.weapon.ammunition > 0 then
					start_reload(self)
				else
					sound.play("#missfire")
				end
			end
		elseif action_id == hash("reload") and action.released  and self.reload_cooldown <= 0 and self.weapon.catridges ~= self.weapon.clip_capacity then
			start_reload(self)
		end
	end
end

function update(self, dt)
	
	if self.crosshair then
		local crosshair_world = go.get_world_position("crosshair")
		local player_world = go.get_world_position()
		local angle = math.atan2(player_world.x - crosshair_world.x, crosshair_world.y - player_world.y)
		local rotation = vmath.quat_rotation_z(angle)
		go.set_rotation(rotation)

		if self.reload_cooldown > 0 then
			self.reload_cooldown = self.reload_cooldown - dt
			if self.reload_cooldown > 0 then 
				msg.post("/gui#level", "update_reload", { position = crosshair_world, cooldown = self.reload_cooldown, all_time = self.reload_time})
			else
				--reload(self, self.weapon)
			end
		elseif self.attack_cooldown > 0 then
			self.attack_cooldown = self.attack_cooldown - dt
			if self.attack_cooldown > 0 and self.weapon.show_reload_between_attack then 
				msg.post("/gui#level", "update_reload", { position = crosshair_world, cooldown = self.attack_cooldown, all_time = self.weapon.time_between_atack})
			else
				msg.post("/gui#level", "hide_reload")
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == CHANGE_WEAPON_ID and self.reload_cooldown <= 0 then
		change_weapon(self, message.weapon)
	elseif message_id == TAKE_AMMO then
		local weapon-- = nil
		if message.weapon == hash("gun") then
			weapon = weapons["gun"]
		else
			weapon = weapons["shotgun"]
		end
		weapon.ammunition = weapon.ammunition + message.amount
		update_weapon_info(weapon)
	end
end
